name: build

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
      - '**/*.md'
  pull_request:
    branches:
      - main
      - dotnet-vnext
      - dotnet-nightly
  workflow_dispatch:

permissions:
  contents: read

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_NOLOGO: true
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  FORCE_COLOR: 3
  NUGET_XMLDOC_MODE: skip
  TERM: xterm

jobs:
  build:
    name: ${{ matrix.os-name }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20

    env:
      PUBLISH_CONTAINER: ${{ github.event.repository.fork == false && github.ref_name == github.event.repository.default_branch && matrix.os-name == 'linux' && vars.CONTAINER_REGISTRY != '' }}

    outputs:
      container-tag: ${{ steps.publish-container.outputs.container-tag }}

    permissions:
      attestations: write
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - os-name: macos
            runner: macos-latest
          - os-name: linux
            runner: ubuntu-latest
          - os-name: windows
            runner: windows-latest

    steps:

    - name: Update Windows agent configuration
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        "DOTNET_INSTALL_DIR=D:\tools\dotnet" >> ${env:GITHUB_ENV}
        "DOTNET_ROOT=D:\tools\dotnet" >> ${env:GITHUB_ENV}
        "NUGET_PACKAGES=D:\.nuget\packages" >> ${env:GITHUB_ENV}

    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1

    - name: Build, test and publish
      shell: pwsh
      run: ./build.ps1

    - name: Docker log in
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      if: env.PUBLISH_CONTAINER == 'true'
      with:
        registry: ${{ vars.CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_REGISTRY_USERNAME }}
        password: ${{ secrets.ACR_REGISTRY_PASSWORD }}

    - name: Publish container
      id: publish-container
      if: runner.os == 'Linux'
      shell: pwsh
      env:
        ContainerRegistry: ${{ env.PUBLISH_CONTAINER == 'true' && vars.CONTAINER_REGISTRY || '' }}
      run: |
        dotnet publish ./src/SignInWithApple --arch x64 --os linux -p:PublishProfile=DefaultContainer

    - name: Attest container image
      uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
      if: steps.publish-container.outputs.container-digest != ''
      with:
        push-to-registry: true
        subject-digest: ${{ steps.publish-container.outputs.container-digest }}
        subject-name: ${{ steps.publish-container.outputs.container-image }}

  deploy:
    if: github.event.repository.fork == false && github.ref_name == github.event.repository.default_branch
    name: deploy-production
    needs: build
    runs-on: ubuntu-latest
    concurrency: production_environment

    environment:
      name: production
      url: ${{ vars.APPLICATION_URL }}

    permissions:
      id-token: write

    steps:

    - name: Azure log in
      uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy container to Azure App Service
      uses: azure/webapps-deploy@657f0700ea5214d56a0400d8ac5e8023c963d25d # v3.0.6
      id: deploy_production
      with:
        app-name: ${{ vars.AZURE_WEBAPP_NAME }}
        images: ${{ needs.build.outputs.container-tag }}
